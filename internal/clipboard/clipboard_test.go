package clipboard

import (
	"strings"
	"testing"
	
	"github.com/atotto/clipboard"
)

// TestCopyPasteBasic verifies simple copy and paste.
func TestCopyPasteBasic(t *testing.T) {
    // Skip the test if the clipboard is unavailable
	if !IsAvailable() {
        t.Skip("–±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
	}
	
	input := "Hello, Clipboard!"
	if err := Copy(input); err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Copy: %v", err)
	}
	output, err := Paste()
	if err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Paste: %v", err)
	}
	if output != input {
        t.Errorf("–æ–∂–∏–¥–∞–ª–æ—Å—å %q, –ø–æ–ª—É—á–µ–Ω–æ %q", input, output)
	}
}

// TestCopyEmpty verifies handling of an empty string.
func TestCopyEmpty(t *testing.T) {
	input := ""
	err := Copy(input)
	if err == nil {
        t.Fatal("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏")
	}
	if err != ErrEmptyData {
        t.Errorf("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ ErrEmptyData, –ø–æ–ª—É—á–µ–Ω–æ: %v", err)
	}
}

// TestCopyMultiline verifies copying of multiline text.
func TestCopyMultiline(t *testing.T) {
    // Skip the test if the clipboard is unavailable
	if !IsAvailable() {
        t.Skip("–±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
	}
	
	input := "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞\n–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞"
	if err := Copy(input); err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Copy: %v", err)
	}
	output, err := Paste()
	if err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Paste: %v", err)
	}
	if output != input {
        t.Errorf("–æ–∂–∏–¥–∞–ª–æ—Å—å %q, –ø–æ–ª—É—á–µ–Ω–æ %q", input, output)
	}
}

// TestCopyUnicode verifies handling of unicode characters.
func TestCopyUnicode(t *testing.T) {
    // Skip the test if the clipboard is unavailable
	if !IsAvailable() {
        t.Skip("–±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
	}
	
	input := "–ü—Ä–∏–≤–µ—Ç üåç „Åì„Çì„Å´„Å°„ÅØ ‰Ω†Â•Ω"
	if err := Copy(input); err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Copy: %v", err)
	}
	output, err := Paste()
	if err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Paste: %v", err)
	}
	if output != input {
        t.Errorf("–æ–∂–∏–¥–∞–ª–æ—Å—å %q, –ø–æ–ª—É—á–µ–Ω–æ %q", input, output)
	}
}

// TestPasteWithoutCopy verifies behavior if Copy was not called before.
// ‚ö†Ô∏è We cannot guarantee an empty value here since the clipboard may contain
// data from other programs. We only verify that Paste does not fail.
func TestPasteWithoutCopy(t *testing.T) {
    // Skip the test if the clipboard is unavailable
	if !IsAvailable() {
        t.Skip("–±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
	}
	
	_, err := Paste()
	if err != nil {
        t.Errorf("Paste –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %v", err)
	}
}

// TestOverwrite verifies that the new value overwrites the old one.
func TestOverwrite(t *testing.T) {
    // Skip the test if the clipboard is unavailable
	if !IsAvailable() {
        t.Skip("–±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
	}
	
	first := "–ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
	second := "–í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"

	if err := Copy(first); err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Copy –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: %v", err)
	}
	if err := Copy(second); err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Copy –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: %v", err)
	}
	output, err := Paste()
	if err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Paste: %v", err)
	}
	if output != second {
        t.Errorf("–æ–∂–∏–¥–∞–ª–æ—Å—å %q, –ø–æ–ª—É—á–µ–Ω–æ %q", second, output)
	}
}

// TestLargeInput verifies handling of large text.
func TestLargeInput(t *testing.T) {
    // Skip the test if the clipboard is unavailable
	if !IsAvailable() {
        t.Skip("–±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ")
	}
	
	var builder strings.Builder
	for i := 0; i < 10000; i++ {
		builder.WriteString("—Å—Ç—Ä–æ–∫–∞ —Ç–µ—Å—Ç–∞\n")
	}
	input := builder.String()

	if err := Copy(input); err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Copy: %v", err)
	}
	output, err := Paste()
	if err != nil {
        t.Fatalf("–æ—à–∏–±–∫–∞ Paste: %v", err)
	}
	if output != input {
        t.Errorf("–æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
	}
}

// TestClipboardUnavailable verifies behavior when the clipboard is unavailable.
func TestClipboardUnavailable(t *testing.T) {
	if IsAvailable() {
        t.Skip("–±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
	}
	
    // Test Copy with unavailable clipboard
	err := Copy("test")
	if err == nil {
        t.Fatal("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞")
	}
	if err != ErrClipboardUnavailable {
        t.Errorf("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ ErrClipboardUnavailable, –ø–æ–ª—É—á–µ–Ω–æ: %v", err)
	}
	
    // Test Paste with unavailable clipboard
	_, err = Paste()
	if err == nil {
        t.Fatal("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞")
	}
	if err != ErrClipboardUnavailable {
        t.Errorf("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ ErrClipboardUnavailable, –ø–æ–ª—É—á–µ–Ω–æ: %v", err)
	}
}

// TestIsAvailable verifies the function that checks clipboard availability.
func TestIsAvailable(t *testing.T) {
    // The function should always return a valid value
	available := IsAvailable()
	if available != !clipboard.Unsupported {
        t.Errorf("IsAvailable() –≤–µ—Ä–Ω—É–ª–∞ %v, –æ–∂–∏–¥–∞–ª–æ—Å—å %v", available, !clipboard.Unsupported)
	}
}

// TestGetStatus verifies the function that returns the clipboard status.
func TestGetStatus(t *testing.T) {
	status := GetStatus()
	expected := "–¥–æ—Å—Ç—É–ø–µ–Ω"
	if !IsAvailable() {
		expected = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	}
	if status != expected {
        t.Errorf("GetStatus() –≤–µ—Ä–Ω—É–ª–∞ %q, –æ–∂–∏–¥–∞–ª–æ—Å—å %q", status, expected)
	}
}

// TestCopyWhitespaceOnly verifies handling of strings that contain only whitespace.
func TestCopyWhitespaceOnly(t *testing.T) {
	testCases := []string{
		"   ",
		"\t\t\t",
		"\n\n\n",
		" \t\n ",
		"\r\n\r\n",
	}
	
	for _, input := range testCases {
		t.Run("input_"+strings.Replace(strings.Replace(strings.Replace(strings.Replace(input, " ", "s", -1), "\t", "t", -1), "\n", "n", -1), "\r", "r", -1), func(t *testing.T) {
			err := Copy(input)
			if err == nil {
                t.Fatal("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏")
			}
			if err != ErrEmptyData {
                t.Errorf("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ ErrEmptyData, –ø–æ–ª—É—á–µ–Ω–æ: %v", err)
			}
		})
	}
}
