package main

import (
	"fmt"
	"io"
	"os"
	"strings"

	"fclip/internal/clipboard"
)

const (
	exitSuccess = 0
	exitError   = 1
)

// main - entry point for the CLI utility.
// Supports commands: copy (read from stdin to clipboard), paste (print to stdout).
func main() {
	if len(os.Args) < 2 {
		printUsage()
		os.Exit(exitError)
	}

	command := strings.ToLower(strings.TrimSpace(os.Args[1]))
	
	switch command {
	case "copy":
		if err := handleCopy(); err != nil {
        fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: %v\n", err)
			os.Exit(exitError)
		}
	case "paste":
		if err := handlePaste(); err != nil {
        fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ: %v\n", err)
			os.Exit(exitError)
		}
	case "status":
		handleStatus()
		os.Exit(exitSuccess)
	case "help", "-h", "--help":
		printUsage()
		os.Exit(exitSuccess)
	default:
        fmt.Fprintf(os.Stderr, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s\n", command)
        fmt.Fprintln(os.Stderr, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'fclip help' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
		os.Exit(exitError)
	}
}

// printUsage prints usage help for the program.
func printUsage() {
	fmt.Println("fclip - —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞")
	fmt.Println()
	fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
	fmt.Println("  fclip copy   # –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ stdin –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
	fmt.Println("  fclip paste  # –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ stdout")
	fmt.Println("  fclip status # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
	fmt.Println("  fclip help   # –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println()
	fmt.Println("–ü—Ä–∏–º–µ—Ä—ã:")
	fmt.Println("  echo 'Hello' | fclip copy")
	fmt.Println("  fclip paste > file.txt")
}

// handleCopy handles the copy command.
func handleCopy() error {
    // Ensure stdin is not empty
	data, err := io.ReadAll(os.Stdin)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ stdin: %w", err)
	}
	
    // Ensure the data is not empty
	dataStr := string(data)
	if strings.TrimSpace(dataStr) == "" {
		return fmt.Errorf("stdin –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
	}
	
    // Validate data size (limit for safety)
	const maxSize = 1024 * 1024 // 1MB
	if len(data) > maxSize {
		return fmt.Errorf("–¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–º–∞–∫—Å–∏–º—É–º %d –±–∞–π—Ç)", maxSize)
	}
	
	if err := clipboard.Copy(dataStr); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: %w", err)
	}
	
	return nil
}

// handlePaste handles the paste command.
func handlePaste() error {
	data, err := clipboard.Paste()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: %w", err)
	}
	
	fmt.Print(data)
	return nil
}

// handleStatus handles the command that checks clipboard status.
func handleStatus() {
	if clipboard.IsAvailable() {
		fmt.Println("‚úÖ –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")
	} else {
		fmt.Println("‚ùå –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		fmt.Println("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ xsel, xclip, wl-clipboard –∏–ª–∏ Termux:API add-on")
	}
}
